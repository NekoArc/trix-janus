#!/usr/bin/perl
use strict;
sub gen_selfsign;
sub gen_cert;
sub template;;

# smaller network: generate a key/cert pair for each server. All servers need
# a copy of the cert file for all servers the connect with, set as the CA file
# for that server (cert/key files are always your own cert/key)
gen_selfsign 'janus', 0;
exit;

# larger network: a single janus-cert.pem file is generated and used as the CA.
# janus-key.pem is NEVER used on a server, and should be stored in a protected location
# Each server uses its own key/cert pair; the following example generates for 3 servers.
gen_selfsign 'janus', 1;
gen_cert 'hub.janus', 'janus';
gen_cert 'leaf.janus', 'janus';
gen_cert 'twig.janus', 'janus';
exit;

sub gen_selfsign {
	my($pfx, $ca) = @_;
	return if -e "$pfx-key.pem";
	open my $tmpl, '>', "$pfx-template";
	template $tmpl, $pfx, $ca;
	close $tmpl;
	system qq{certtool --generate-privkey --outfile $pfx-key.pem} and die;
	system qq{certtool --generate-self-signed --load-privkey $pfx-key.pem --template $pfx-template --outfile $pfx-cert.pem} and die;
	unlink "$pfx-template";
}

sub gen_cert {
	my($pfx, $cafile) = @_;
	return if -e "$pfx-key.pem";
	open my $tmpl, '>', "$pfx-template";
	template $tmpl, $pfx, 0;
	close $tmpl;
	system qq{certtool --generate-privkey --outfile $pfx-key.pem} and die;
	system qq{certtool --generate-certificate --load-privkey $pfx-key.pem --template $pfx-template --load-ca-privkey $cafile-key.pem --load-ca-certificate $cafile-cert.pem --outfile $pfx-cert.pem} and die;
	unlink "$pfx-template";
}

sub template {
	my($fh, $cn, $ca) = @_;
	my $ca_only = $ca ? '' : '#';
	my $srv_only = $ca ? '#' : '';
	print $fh <<END
# X.509 Certificate options
#
# DN options

# The organization of the subject.
# organization = ""

# The organizational unit of the subject.
# unit = ""

# The locality of the subject.
# locality =

# The state of the certificate owner.
# state = ""

# The country of the subject. Two letter code.
# country =

# The common name of the certificate owner.
# (usually the domain name of the server)
cn = "$cn"

# A user id of the certificate owner.
#uid = "clauper"

# If the supported DN OIDs are not adequate you can set
# any OID here.
# For example set the X.520 Title and the X.520 Pseudonym
# by using OID and string pairs.
#dn_oid = "2.5.4.12" "Dr." "2.5.4.65" "jackal"

# This is deprecated and should not be used in new
# certificates.
# pkcs9_email = "none\@none.org"

# The serial number of the certificate
#serial =

# In how many days, counting from today, this certificate will expire.
expiration_days = 10000

# X.509 v3 extensions

# A dnsname in case of a WWW server.
#dns_name = "www.none.org"

# An IP address in case of a server.
#ip_address = "192.168.1.1"

# An email in case of a person
#email = "nobody\@nowhere.com"

# An URL that has CRLs (certificate revocation lists)
# available. Needed in CA certificates.
#crl_dist_points = "http://null.example.com/null/"

# Whether this is a CA certificate or not
$ca_only ca

# Whether this certificate will be used for a TLS client
$srv_only tls_www_client

# Whether this certificate will be used for a TLS server
$srv_only tls_www_server

# Whether this certificate will be used to sign data (needed
# in TLS DHE ciphersuites).
$srv_only signing_key

# Whether this certificate will be used to encrypt data (needed
# in TLS RSA ciphersuites). Note that it is prefered to use different
# keys for encryption and signing.
$srv_only encryption_key

# Whether this key will be used to sign other certificates.
$ca_only cert_signing_key

# Whether this key will be used to sign CRLs.
$ca_only crl_signing_key

# Whether this key will be used to sign code.
# code_signing_key

# Whether this key will be used to sign OCSP data.
# ocsp_signing_key

# Whether this key will be used for time stamping.
# time_stamping_key
END
}
